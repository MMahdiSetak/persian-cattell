import matplotlib.pyplot as plt

raw_score_table = {
    "A": [[3, 52, 101, 126, 176], [], [26, 27, 51, 76, 151]],
    "B": [[152, 177, 178], [28, 53, 54, 78, 103, 128], [77, 102, 127, 153]],
    "C": [[4, 30, 55, 104, 105, 130, 179], [], [5, 29, 79, 80, 129, 154]],
    "E": [[7, 56, 131, 155, 156, 180, 181], [], [6, 31, 32, 57, 81, 106]],
    "F": [[33, 58, 83, 132, 133, 182, 183], [], [8, 82, 107, 108, 157, 158]],
    "G": [[109, 134, 160, 184, 185], [], [9, 34, 59, 84, 159]],
    "H": [[10, 36, 110, 111, 135, 136, 186], [], [35, 60, 61, 85, 86, 161]],
    "I": [[12, 37, 112, 138, 163], [], [11, 62, 87, 137, 162]],
    "L": [[38, 88, 113, 114, 164], [], [13, 63, 64, 89, 139]],
    "M": [[39, 40, 65, 91, 115, 116, 140], [], [14, 15, 90, 141, 165, 166]],
    "N": [[17, 42, 117, 142, 167], [], [16, 41, 66, 67, 92]],
    "O": [[18, 43, 69, 94, 118, 119, 143], [], [19, 44, 68, 93, 144, 168]],
    "Q1": [[20, 46, 70, 145, 169], [], [21, 45, 95, 120, 170]],
    "Q2": [[47, 71, 72, 146, 171], [], [22, 96, 97, 121, 122]],
    "Q3": [[48, 73, 98, 148, 173], [], [23, 24, 123, 147, 172]],
    "Q4": [[49, 50, 74, 99, 124, 149, 174], [], [25, 75, 100, 125, 150, 175]],
}

score_mapping_table = {
    "A": [(0, 1), (2, 3), (4, 4), (5, 6), (7, 7), (8, 8), (9, 10), (11, 11), (12, 13), (14, 20)],
    "B": [(0, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (-1, -1), (13, 13), (-1, -1)],
    "C": [(0, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 17), (18, 19), (20, 20), (21, 26)],
    "E": [(0, 4), (5, 6), (7, 7), (8, 9), (10, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 26)],
    "F": [(0, 5), (6, 6), (7, 8), (9, 10), (11, 12), (13, 13), (14, 15), (16, 17), (18, 20), (21, 26)],
    "G": [(0, 6), (7, 9), (10, 10), (11, 12), (13, 14), (15, 15), (16, 16), (17, 18), (-1, -1), (19, 20)],
    "H": [(0, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 19), (20, 21), (22, 26)],
    "I": [(0, 3), (4, 4), (5, 5), (6, 7), (8, 9), (10, 11), (12, 13), (14, 14), (15, 16), (17, 20)],
    "L": [(0, 4), (5, 6), (7, 7), (8, 9), (10, 11), (12, 13), (14, 14), (15, 16), (17, 18), (19, 20)],
    "M": [(0, 4), (5, 6), (7, 8), (9, 9), (10, 11), (12, 13), (14, 15), (16, 17), (18, 19), (20, 26)],
    "N": [(0, 5), (6, 6), (7, 7), (8, 9), (10, 10), (11, 11), (12, 13), (14, 14), (15, 16), (17, 20)],
    "O": [(0, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 17), (18, 20), (21, 26)],
    "Q1": [(0, 5), (6, 6), (7, 7), (8, 9), (10, 10), (11, 12), (13, 13), (14, 15), (16, 16), (17, 20)],
    "Q2": [(0, 3), (4, 5), (6, 6), (7, 8), (9, 9), (10, 11), (12, 12), (13, 14), (15, 16), (17, 20)],
    "Q3": [(0, 5), (6, 8), (9, 10), (11, 12), (13, 14), (15, 15), (16, 16), (17, 18), (19, 19), (20, 20)],
    "Q4": [(0, 2), (3, 4), (5, 7), (8, 9), (10, 11), (12, 14), (15, 16), (17, 18), (19, 21), (22, 26)],
}


def second_order_score(fs, sex):
    score = {
        "Extroversion": (3 * fs["A"] + 4 * fs["F"] + 4 * fs["H"] - 4 * fs["Q2"] + 17) / 10,
        "Anxiety": (-3 * fs["C"] - fs["H"] + fs["L"] + 3 * fs["O"] - fs["Q3"] + 3 * fs["Q4"] + 44) / 10,
        "Flexibility":
            (-1 * fs["A"] + 4 * fs["E"] + 2 * fs["F"] - 6 * fs["I"] + 2 * fs["L"] - 4 * fs[
                "M"] + 72) / 10 if sex == 2 else
            (-2 * fs["A"] + 2 * fs["F"] - 6 * fs["I"] - 4 * fs["M"] - 2 * fs["Q1"] + 121) / 10,
        "Independence":
            (5 * fs["E"] - fs["G"] + 3 * fs["H"] + 2 * fs["M"] + 4 * fs["Q1"]
             + fs["Q2"] - 22) / 10 if sex == 2 else
            (5 * fs["E"] - fs["G"] + 3 * fs["H"] + 2 * fs["L"] - fs["N"] - 2 * fs["O"] + 2 * fs["Q1"]
             + fs["Q2"] + 6) / 10,
        "Self Control": (7 * fs["G"] + 5 * fs["Q3"] - 11) / 10,
        "Compatibility": (fs["B"] + 3 * fs["C"] + 2 * fs["E"] + 4 * fs["F"] + fs["G"] - fs["H"] - 2 * fs["I"]
                          - 3 * fs["O"] - fs["Q1"] - 4 * fs["Q4"] + 44) / 10,
        "Leadership": (fs["B"] + fs["C"] + fs["E"] + 2 * fs["F"] + 2 * fs["G"] + 2 * fs["H"] - fs["I"]
                       - fs["M"] + fs["N"] - 2 * fs["O"] + 2 * fs["Q3"] - fs["Q4"] + 17) / 10,
        "Creativity": (-3 * fs["A"] + 3 * fs["B"] + 2 * fs["E"] - 3 * fs["F"] + 2 * fs["H"] + 3 * fs["I"]
                       + 2 * fs["M"] - 2 * fs["N"] + 2 * fs["Q1"] + 3 * fs["Q2"] + 6) / 10,
    }
    return score


def plot_score(score, title):
    # Mid-point
    mid_point = 5.5

    # Function to determine the color based on the number
    def determine_color(number):
        if 4 <= number <= 7:
            return 'green'
        else:
            return 'red'

    # Create figure
    plt.figure(figsize=(10, 6))

    # Plot each bar
    for i, (key, value) in enumerate(reversed(list(score.items()))):
        color = determine_color(value)
        # The bar starts from mid-point and extends to the value
        plt.barh(key, value - mid_point, left=mid_point, color=color)

    plt.axvline(mid_point, color='black', linewidth=0.8, linestyle='--')  # Mid-point line
    plt.xlabel('Score')
    plt.xlim(1, 10)
    plt.title(title)
    plt.grid(axis='x')
    plt.savefig(f'./report/{title}.png')
    plt.show()
